1.Find all the topics and tasks which are thought in the month of October

   Answer:-db.topics.aggregate([
 {
      $lookup: {
        from: "tasks",
        localField: "topic_id",
        foreignField: "topic_id",
        as: "info",
      },
    },
    {
      $match: {
        $and: [
          {
            $and: [
              { date: { $gt: new Date("30-sep-2020") } },
              { date: { $lt: new Date("1-nov-2020") } },
            ],
          },
  
          {
            $and: [
              { "info.due_date": { $gt: new Date("30-sep-2020") } },
              { "info.due_date": { $lt: new Date("1-nov-2020") } },
            ],
          },
        ],
      },
    },
]);

2.Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020

   Answer:- db.company_drives.find({
    $and: [
      { drive_date: { $gte: new Date("15-Oct-2020") } },
      { drive_date: { $lte: new Date("31-Oct-2020") } },
    ],
  });


3.Find all the company drives and students who are appeared for the placement.

    Answer:-db.company_drives.aggregate([
	{
      $lookup: {
        from: "users",
        localField: "user_id",
        foreignField: "user_id",
        as: "info",
      },
    },
    {
      $project: {
        "info.name": 1,
        company_name: 1,
        drive_date: 1,
        "info.email": 1,
        "info.user_id": 1,
				_id: 0,
      },
    },
]);

4.Find the number of problems solved by the user in codekata

    Answer:-db.users.aggregate([
 {
      $lookup: {
        from: "codekata",
        localField: "user_id",
        foreignField: "user_id",
        as: "info",
      },
    },
    {
      $project: {
        _id: 0,
        userid: 1,
        name: 1,
        "info.sum_completed": 1,
      },
    },
]);

5.Find all the mentors with who has the mentee's count more than 15

    Answer:-db.users.aggregate([
    {
        $group: {
            _id: "$mentor_id",
            menteeCount: { $sum: 1 }
        }
    },
    {
        $match: {
            menteeCount: { $gt: 15 }
        }
    },
    {
        $lookup: {
            from: "mentors",
            localField: "_id",
            foreignField: "mentor_id",
            as: "mentor_info"
        }
    },
    {
        $unwind: "$mentor_info"
    },
    {
        $project: {
            _id: 0,
            mentor_id: "$_id",
            menteeCount: 1,
            mentor_name: "$mentor_info.mentor_name",
            mentor_email: "$mentor_info.mentor_email"
        }
    }
])


6.Find the number of users who are absent and task is not submitted  between 15 oct-2020 and 31-oct-2020

    Answer:-const tasksInDateRange = db.tasks.aggregate([
    {
        $match: {
            due_date: {
                $gte: new Date("2020-10-15T00:00:00Z"),
                $lte: new Date("2020-10-31T23:59:59Z")
            }
        }
    }
]).toArray();

let usersWhoDidNotSubmit = new Set();

tasksInDateRange.forEach(task => {
    const allUsers = [1, 2, 3, 4, 5]; // assuming user ids are 1 to 5
    const submittedUsers = new Set(task.submitted);
    
    allUsers.forEach(user => {
        if (!submittedUsers.has(user)) {
            usersWhoDidNotSubmit.add(user);
        }
    });
});


let usersWhoWereAbsent = new Set();

tasksInDateRange.forEach(task => {
    const attendanceRecord = db.attendance.findOne({ topic_id: task.topic_id });
    for (const [user, present] of Object.entries(attendanceRecord.attendance)) {
        if (!present) {
            usersWhoWereAbsent.add(parseInt(user));
        }
    }
});

const absentAndNotSubmitted = [...usersWhoDidNotSubmit].filter(user => usersWhoWereAbsent.has(user));

print(`Number of users who are absent and task not submitted user's: ${absentAndNotSubmitted}`);

